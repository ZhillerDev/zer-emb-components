#ifndef __ZSHELL_PROTO_H__
#define __ZSHELL_PROTO_H__


#include "zshell_config.h"


// ============================ 帧结构定义 =================================

// 返回值状态码
#define FRAME_INVALID 			0
#define FRAME_VALID					1

/**
 * @brief 定义通信帧结构体
 *
 * zsFrame 结构体用于表示一个标准的通信帧，它包含以下属性：
 * - frameStart (uint8_t): 帧头，用于标识帧的开始，固定值为0xAA。
 * - commandCode (uint8_t): 命令码，用于指定帧中包含的命令或请求类型。
 * - dataLength (uint16_t): 数据长度，指示随后数据字段的长度。
 * - data (uint8_t*): 数据指针，指向包含实际传输数据内容的数组。
 * - checksum (uint8_t): 校验和，用于检测整个帧在传输过程中是否出现错误，通常通过计算帧中某些部分的累加和来获得。
 * - frameEnd (uint8_t): 帧尾，用于标识帧的结束，固定值为0x55。
 */
typedef struct _zs_frame{
	uint8_t frameStart;
	uint8_t commandCode;
	uint16_t dataLength;
	uint8_t *data;
	uint8_t checkSum;
	uint8_t frameEnd;
} zsFrame;

// 帧数据处理
uint8_t zsFrame_Verify(zsFrame* f);
uint8_t zsFrame_ParserFromPlainData(uint8_t* data,zsFrame* f);
uint8_t* zsFrame_ParserToPlainData(zsFrame* f,uint16_t* len);
void zsFrame_PrintSelf(zsFrame* f);
void zsFrame_Builder(zsFrame* frame,uint8_t code,uint8_t* data);

// 累加校验和处理
uint8_t zsFrame_VerifyCheckSum(zsFrame* f);
uint8_t zsFrame_GenerateCheckSum(zsFrame* f);
// 疑惑校验和处理
uint8_t zsFrame_VerifyXorSum(zsFrame* f);
uint8_t zsFrame_GenerateXorSum(zsFrame* f);
// CRC校验处理
uint8_t zsFrame_VerifyCRC(zsFrame* f);
uint8_t zsFrame_GenerateCRC(zsFrame* f);



// ============================ CRC校验定义 =================================

typedef enum{
	CRC4_ITU=0,
	CRC8,
	CRC8_ITU,
	CRC16_IBM,
	CRC32,
	CRC_NUM
} CrcTypeE;

typedef enum {
	E_FALSE = 0, //假（错误）
	E_TRUE = !E_FALSE //真（正确）
} BoolTypeE;

typedef struct {
	char *Name;
	unsigned char Width; //宽度，即CRC比特数。
	unsigned int  Poly; //生成多项式的简写，以16进制表示。例如：CRC-32即是0x04C11DB7，忽略了最高位的"1"，即完整的生成项是0x104C11DB7。
	unsigned int  CrcInit; //初始值,这是算法开始时寄存器（crc）的初始化预置值，十六进制表示。
	unsigned int  XorOut; //计算结果与此参数异或后得到最终的CRC值。
	BoolTypeE RefIn; //待测数据的每个字节是否按位反转，E_TRUE或E_FALSE。
	BoolTypeE RefOut; //在计算后之后，异或输出之前，整个数据是否按位反转，E_TRUE或E_FALSE。
} CrcInfoTypeS;

const static CrcInfoTypeS s_crcInfoTab[CRC_NUM] = {
	//CRC算法名称			宽度  多项式      初始值      结果异或值  输入反转    输出反转
	{"CRC4_ITU", 			4,     0x03,       0x00,       0x00,       E_TRUE,   E_TRUE},
	{"CRC8", 				8,     0x07,       0x00,       0x00,       E_FALSE,  E_FALSE},
	{"CRC8_ITU", 			8,     0x07,       0x00,       0x55,       E_FALSE,  E_FALSE},
	{"CRC16_IBM", 			16,    0x8005,     0x0000,     0x0000,     E_TRUE,   E_TRUE},
	{"CRC32", 				32,    0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, E_TRUE,   E_TRUE},
};

static unsigned int s_crcTab[256] = 
{//CRC8
	0x00, 0x07, 0x0E, 0x09, 0x1C, 0x1B, 0x12, 0x15, 0x38, 0x3F, 0x36, 0x31, 0x24, 0x23, 0x2A, 0x2D,
	0x70, 0x77, 0x7E, 0x79, 0x6C, 0x6B, 0x62, 0x65, 0x48, 0x4F, 0x46, 0x41, 0x54, 0x53, 0x5A, 0x5D,
	0xE0, 0xE7, 0xEE, 0xE9, 0xFC, 0xFB, 0xF2, 0xF5, 0xD8, 0xDF, 0xD6, 0xD1, 0xC4, 0xC3, 0xCA, 0xCD,
	0x90, 0x97, 0x9E, 0x99, 0x8C, 0x8B, 0x82, 0x85, 0xA8, 0xAF, 0xA6, 0xA1, 0xB4, 0xB3, 0xBA, 0xBD,
	0xC7, 0xC0, 0xC9, 0xCE, 0xDB, 0xDC, 0xD5, 0xD2, 0xFF, 0xF8, 0xF1, 0xF6, 0xE3, 0xE4, 0xED, 0xEA,
	0xB7, 0xB0, 0xB9, 0xBE, 0xAB, 0xAC, 0xA5, 0xA2, 0x8F, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9D, 0x9A,
	0x27, 0x20, 0x29, 0x2E, 0x3B, 0x3C, 0x35, 0x32, 0x1F, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0D, 0x0A,
	0x57, 0x50, 0x59, 0x5E, 0x4B, 0x4C, 0x45, 0x42, 0x6F, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7D, 0x7A,
	0x89, 0x8E, 0x87, 0x80, 0x95, 0x92, 0x9B, 0x9C, 0xB1, 0xB6, 0xBF, 0xB8, 0xAD, 0xAA, 0xA3, 0xA4,
	0xF9, 0xFE, 0xF7, 0xF0, 0xE5, 0xE2, 0xEB, 0xEC, 0xC1, 0xC6, 0xCF, 0xC8, 0xDD, 0xDA, 0xD3, 0xD4,
	0x69, 0x6E, 0x67, 0x60, 0x75, 0x72, 0x7B, 0x7C, 0x51, 0x56, 0x5F, 0x58, 0x4D, 0x4A, 0x43, 0x44,
	0x19, 0x1E, 0x17, 0x10, 0x05, 0x02, 0x0B, 0x0C, 0x21, 0x26, 0x2F, 0x28, 0x3D, 0x3A, 0x33, 0x34,
	0x4E, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5C, 0x5B, 0x76, 0x71, 0x78, 0x7F, 0x6A, 0x6D, 0x64, 0x63,
	0x3E, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2C, 0x2B, 0x06, 0x01, 0x08, 0x0F, 0x1A, 0x1D, 0x14, 0x13,
	0xAE, 0xA9, 0xA0, 0xA7, 0xB2, 0xB5, 0xBC, 0xBB, 0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
	0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB, 0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3,
};

uint32_t zsCRC_BitsReverse(uint32_t inVal, uint8_t bits);
uint32_t zsCRC_Generate(uint8_t type, uint8_t *buf, uint32_t bufLen);
void zsCRC_CrcTableCalculate(uint8_t type);


#endif /* __ZSHELL_PROTO_H__ */
